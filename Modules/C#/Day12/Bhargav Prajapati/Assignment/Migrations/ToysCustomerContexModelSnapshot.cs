// <auto-generated />
using System;
using Assignment;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Assignment.Migrations
{
    [DbContext(typeof(ToysCustomerContex))]
    partial class ToysCustomerContexModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Assignment.Modals.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Zip")
                        .HasColumnType("float");

                    b.Property<string>("street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Assignment.Modals.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("ContectNumber")
                        .HasColumnType("float");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Assignment.Modals.Plants", b =>
                {
                    b.Property<int>("PlantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlantName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlantId");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("Assignment.Modals.Toys", b =>
                {
                    b.Property<int>("ToyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PlantsPlantId")
                        .HasColumnType("int");

                    b.Property<string>("ToyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ToyPrice")
                        .HasColumnType("int");

                    b.HasKey("ToyId");

                    b.HasIndex("PlantsPlantId");

                    b.ToTable("Toys");
                });

            modelBuilder.Entity("Assignment.Modals.ToysPerson", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ToyId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId", "ToyId");

                    b.HasIndex("ToyId");

                    b.ToTable("ToysPeople");
                });

            modelBuilder.Entity("Assignment.Modals.Address", b =>
                {
                    b.HasOne("Assignment.Modals.Customer", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Assignment.Modals.Toys", b =>
                {
                    b.HasOne("Assignment.Modals.Plants", "Plants")
                        .WithMany("Toys")
                        .HasForeignKey("PlantsPlantId");

                    b.Navigation("Plants");
                });

            modelBuilder.Entity("Assignment.Modals.ToysPerson", b =>
                {
                    b.HasOne("Assignment.Modals.Customer", "Customer")
                        .WithMany("ToysPeople")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment.Modals.Toys", "Toys")
                        .WithMany("ToysPeople")
                        .HasForeignKey("ToyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Toys");
                });

            modelBuilder.Entity("Assignment.Modals.Customer", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("ToysPeople");
                });

            modelBuilder.Entity("Assignment.Modals.Plants", b =>
                {
                    b.Navigation("Toys");
                });

            modelBuilder.Entity("Assignment.Modals.Toys", b =>
                {
                    b.Navigation("ToysPeople");
                });
#pragma warning restore 612, 618
        }
    }
}
