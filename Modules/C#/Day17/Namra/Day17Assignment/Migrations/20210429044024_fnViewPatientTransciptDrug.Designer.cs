// <auto-generated />
using System;
using Day17Assignment.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Day17Assignment.Migrations
{
    [DbContext(typeof(Day17AssignmentContext))]
    [Migration("20210429044024_fnViewPatientTransciptDrug")]
    partial class fnViewPatientTransciptDrug
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Day17Assignment.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AdminID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("AdminId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Day17Assignment.Models.Assistant", b =>
                {
                    b.Property<int>("AssistantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssistantContact")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("AssistantEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AssistantName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("AssistantId");

                    b.ToTable("Assistants");
                });

            modelBuilder.Entity("Day17Assignment.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Day17Assignment.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("DoctorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Specialist")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("DoctorId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Day17Assignment.Models.Drug", b =>
                {
                    b.Property<int>("DrugId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DrugContent")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("Expiry")
                        .HasColumnType("tinyint");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("DrugId");

                    b.ToTable("Drugs");
                });

            modelBuilder.Entity("Day17Assignment.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PatientAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PatientContact")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("PatientCreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PatientEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("PatientId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Day17Assignment.Models.Transcript", b =>
                {
                    b.Property<int>("TranscriptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Assistants")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Bill")
                        .HasColumnType("int");

                    b.Property<string>("Doctors")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Drugs")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TranscriptDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("TranscriptId");

                    b.HasIndex("PatientId");

                    b.ToTable("Transcript");
                });

            modelBuilder.Entity("Day17Assignment.Models.TranscriptAssistant", b =>
                {
                    b.Property<int>("AssistantId")
                        .HasColumnType("int");

                    b.HasKey("AssistantId")
                        .HasName("fkTranscriptAssistant");

                    b.ToTable("TranscriptAssistants");
                });

            modelBuilder.Entity("Day17Assignment.Models.TranscriptDoctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.HasKey("DoctorId")
                        .HasName("fkTranscriptDoctor");

                    b.ToTable("TranscriptDoctors");
                });

            modelBuilder.Entity("Day17Assignment.Models.TranscriptDrug", b =>
                {
                    b.Property<int>("DrugId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("DrugId")
                        .HasName("fkTranscriptDrug");

                    b.ToTable("TranscriptDrugs");
                });

            modelBuilder.Entity("Day17Assignment.Models.Doctor", b =>
                {
                    b.HasOne("Day17Assignment.Models.Department", "Department")
                        .WithMany("Doctors")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fkDoctorDepartment")
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Day17Assignment.Models.Transcript", b =>
                {
                    b.HasOne("Day17Assignment.Models.Patient", "Patient")
                        .WithMany("Transcripts")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("fkTransiptPatient")
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Day17Assignment.Models.TranscriptAssistant", b =>
                {
                    b.HasOne("Day17Assignment.Models.Assistant", "Assistant")
                        .WithOne("TranscriptAssistant")
                        .HasForeignKey("Day17Assignment.Models.TranscriptAssistant", "AssistantId")
                        .HasConstraintName("FK__Transcrip__Assis__3C69FB99")
                        .IsRequired();

                    b.Navigation("Assistant");
                });

            modelBuilder.Entity("Day17Assignment.Models.TranscriptDoctor", b =>
                {
                    b.HasOne("Day17Assignment.Models.Doctor", "Doctor")
                        .WithOne("TranscriptDoctor")
                        .HasForeignKey("Day17Assignment.Models.TranscriptDoctor", "DoctorId")
                        .HasConstraintName("FK__Transcrip__Docto__398D8EEE")
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Day17Assignment.Models.TranscriptDrug", b =>
                {
                    b.HasOne("Day17Assignment.Models.Drug", "Drug")
                        .WithOne("TranscriptDrug")
                        .HasForeignKey("Day17Assignment.Models.TranscriptDrug", "DrugId")
                        .HasConstraintName("FK__Transcrip__DrugI__49C3F6B7")
                        .IsRequired();

                    b.Navigation("Drug");
                });

            modelBuilder.Entity("Day17Assignment.Models.Assistant", b =>
                {
                    b.Navigation("TranscriptAssistant");
                });

            modelBuilder.Entity("Day17Assignment.Models.Department", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Day17Assignment.Models.Doctor", b =>
                {
                    b.Navigation("TranscriptDoctor");
                });

            modelBuilder.Entity("Day17Assignment.Models.Drug", b =>
                {
                    b.Navigation("TranscriptDrug");
                });

            modelBuilder.Entity("Day17Assignment.Models.Patient", b =>
                {
                    b.Navigation("Transcripts");
                });
#pragma warning restore 612, 618
        }
    }
}
